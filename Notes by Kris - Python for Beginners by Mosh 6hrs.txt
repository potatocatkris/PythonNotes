Hello! my name is Kris, I am a DevOps student who is learning Python. I got recommended this YT video to learn Python, while watching the video, I made some notes for everyone to enjoy. I hope this helps others, share it please, and dont stop learning friends.

Python Tutorial by Programming with Mosh
https://www.youtube.com/watch?v=_uQrJ0TkZlc

############################
# * Chapter 1: Variables * #
############################
13:05 on YT

Variables: temporarily store date on the computers memory
example: price = 10

price is the identifier with a value of 10

$Terminal practice

1 price = 10
2 price = 20
3 print(price)

The computer will produce the number 20 because the code will go line by line, 1, 2, finally 3

Variables: temporarily store data on the computers memory
Expression: piece of code that produces a value
Strings: sequence of characters
Integers: whole numbers without a decimal point
Floating Point Number (Float): numbers with a decimal point
Boolean: values that can be true or false

#Exercise, define 3 variable, name, age and is the patient new or not

John Smith, 20, is new patient

$Terminal
1 full_name = 'John Smith'
2 age = 20
3 is_new_patient = True

#########################
# * Chapter 2: Inputs * #
#########################
18:24 on YT

$Terminal:
input('What is your name? ')

the input function will print this message 'What is your name? ' on the terminal, and it will wait for the user to input a value. 

$Terminal:
1 name = input('What is your name? ')
2 print('Hi ' + name)

name is the variable we created, input is the function we are asking the computer to execute, in this case, the computer will ask the user 'What is your name? '

We want to greet the user with Hi *name of user* 

We use print('Hi ' + name), print is the function that will display the string 'Hi ' plus the name variable. Below is an example of what the computer should ask you if you run the commands above in terminal

What is your name? Potato
Hi Potato

#Exercise, ask 2 questions, what is a users name and favorite color. Then, print a message like "Potato likes blue

$Terminal
1 name = input('What is your name? ')
2 color = input('What is your favorite color? ')
3 print(name + ' likes ' + color)

First the computer will ask the user 'What is your name? ' it will store the value
Second the computer will ask the user 'What is your favorite color? ' it will store the value
Third we ask the computer to print the name of the user followed by the string ' likes ' followed by the favorite color of the user

The solution should look like this

Result:
What is your name? potato
What is your favorite color? blue
potato likes blue

##################################
# * Chapter 3: Type conversion * #
##################################
22:49 on YT

$Terminal
1 birth_year = input('Birth year: ')
2 age = 2024 - birth_year
3 print(age)

Running this code, the computer will ask the user what birth year the user was born in, it will then try to subtract the current year 2024 minus the birth year
We get an error in our code, it will show you the location of the file and in which line the error occurs

Error:
Traceback (most recent call last):
  File "C:\Users\potat\PycharmProjects\learingpython\app.py", line 2, in <module>
    age = 2024 - birth_year
          ~~~~~^~~~~~~~~~~~
TypeError: unsupported operand type(s) for -: 'int' and 'str'

We are getting a error because Python is trying subtract a string from an integer, it doesnt know what to do

int() - converting a string into an integer
float() - converting a string into a float (number with decimal point)
bool() - converting a string into a boolean value (true or false)

$Terminal
1 birth_year = input('Birth year: ')
2 age = 2024 - int(birth_year)
3 print(age)

We add the int() to our birth_year to convert the string into an integer that Python may use, if you this code and input your birth year, your age should appear

#Exercise: Ask a user their weight in pounds and convert it into kilo, print on the terminal

$Terminal
1 weight_lbs = input('Weight (lbs): ')
2 weight_kg = weight_lbs * 0.45
3 print(weight_kg)

Result:
Traceback (most recent call last):
  File "C:\Users\potat\PycharmProjects\learingpython\app.py", line 2, in <module>
    weight_kg = weight_lbs * 0.45
                ~~~~~~~~~~~^~~~~~
TypeError: can't multiply sequence by non-int of type 'float'

We cannot multiply a string by a float, we must convert weight_lbs into a float and then multiply

$Terminal
1 weight_lbs = input('Weight (lbs): ')
2 weight_kg = int(weight_lbs) * 0.45
3 print(weight_kg)

we add the int() function to weight_lbs to make the string into a float. If you run the code above you should be able to get your weight in pounds converted into kilos

##########################
# * Chapter 4: Strings * # 
##########################
29:35 on YT

$Terminal
1 course = ('Python's for Beginners')

Result:
  File "C:\Users\potat\PycharmProjects\pythonProject\app.py", line 1
    course = ('Python's for Beginners')
                                     ^
SyntaxError: unterminated string literal (detected at line 1)

We cannot add another quotation mark after Python because Python will understand that as a string and the code after it as mumbo jumbo
To fix this we may add double quotation marks at the beginning and end, with the single quotation mark being used in Python's

$Terminal
1 course = ("Python's for Beginners")
2 print(course)

Result: 
Python's for Beginners

If we want to add double quotation marks for "Beginners", we must place a single quotation mark at the beginning and end of the string, and double quotation marks "Beginners". 

$Terminal
1 course = 'Python for "Beginners"'
2 print(course)

Result:
Python for "Beginners"

We use triple quotation to define a string with multiple lines

$Terminal
1 course = ''' 
2 Hi Potato,
3 
4 Here is our first email to you
5 
6 Thank you, 
7 The Starchy Team
8
9 '''
10 print(course)

Result:
Hi Potato,

Here is our first email to you

Thank you, 
The Starchy Team

We may add brackets to get a character in a given index in a string

$Terminal
1 course = 'Python for Beginners'
2 print(course[0])

Result:
P

The index of the first character in this string is 0

$Terminal
1 course = 'Python for Beginners'
            0123456789....so on
2 print(course[0])

You can get the last character of a string by using -1 in brackets, if you use -3, it will grab the 3rd last character from that string

$Terminal
1 course = 'Python for Beginners'
2 print(course[-1])

Result:
s

We may extract multiple characters by using a colon within our bracket. 

$Terminal
1 course = 'Python for Beginners'
2 print(course[0:3])

Result:
Pyt

Python interpreter will return all characters starting from index 0 to index 3, but it does not show the last character

$Terminal
1 course = 'Python for Beginners'
2           0123
3 print(course[0:3])


There are default values, so if you do not provide a value it will default to 0

$Terminal
1 course = 'Python for Beginners'
2 print(course[0:])

line 2 - since there is no value for the last index, it will default to 0, therefore all the characters in the string will be shown

Result: Python for Beginners

If you change the first index to 1, and have no value for the second index, it will show all the characters in the string except for the first one

$Terminal
1 course = 'Python for Beginners'
2 print(course[1:])

Result: ython for Beginners

We also have a default value for first index, it is 0, so if you leave the first index with no value, Python will assume 0 is the value

$Terminal
1 course = 'Python for Beginners'
2 print(course[:5])

Result: Pytho

If we have the first and second index with no value, Python will assume the value is 0, therefore the whole string will be copied
We may use this to copy string from variables

$Terminal
1 course = 'Python for Beginners' course variable holds 'Python for Beginners' 
2 another = course[:]
3 print(another)

line 2 - another variable will copy whats in course variable

Result: Python for Beginners

#Exercise: We write a name variable with the characters 'Jennfer'. We will print the name variable with an index of 1 and -1, what will be the result without running this in Python?

Explanation: We will use 'Jennifer' as a string, we will use [1:-1] as an index, what that means is, Python will show the characters from the 'Jennifer' string start with index 1 all the way to index -1 but will exclude the last character. Since strings characters start at 0123 etc etc, we will present the letter e since its at index 1, and we will present e also since its the last character from the string, excluding the last character r

$Terminal
name = 'Jennifer'
	01234567 <- start at index 1, which is e
	76543210 negative <- end -1 index, which is e, r will be excluded
print(name[1:-1])

Result: 
ennife

####################################
# * Chapter 5: Formatted Strings * #
####################################
37:40 on YT

Formatted strings are useful when you want to dynamically generate text with your variables

We want to print John [Smith] is a coder in the terminal, how do we do this?

Explanation:
$Terminal
1 first = 'John'
2 last = 'Smith'
3 message = first + ' [' + last + '] is a coder' 
4 print(message)

line 3 - we make a message variable, we add the first name, followed by the [ bracket in a string, plus the last name, plus a string that has the ending bracket ], followed by is a coder

Result: John [Smith] is a coder

This method definitely works but it is not ideal to do so, because as our text becomes more complicated, it becomes harder to visual the output. Someone looking at the code would have to remember all the concatenations, we can use formatted strings to help us visualize the output

$Terminal
1 first = 'John'
2 last = 'Smith'
3 message = first + ' [' + last + '] is a coder'
4 msg = f'{first} [{last}] is a coder'
5 print(message)

line 4 - we use curly braces to define place holders or holes in our string. When we run our program these holes get filed with the value of our variables

Result: 
John [Smith] is a coder - you should get the same result if you remove line 3, the formatted string should work

To define a formatted string, prefix your string with an F, and use curly braces to insert values into your strings

#################################
# * Chapter 5: String Methods * #
#################################
40:54 on YT

We can calculate the amount of characters in the string using the len function

$Terminal
1 course = 'Python for Beginners'
2 print(len(course))

Result:
20

This is useful when you get info from a user, for example, when you fill out a form online, the input fill often has a limit, example 50 characters max. Using the len function, we can enforce a character limit and display a error message to the user.

We can use a dot operator to convert all the characters in a string to lower case or upper case. The different functions you can use with a dot operator is technically called a method. When a function belong to something else or is specific to some kind of object we refer that function as a method. Len and print are general purpose functions, they dont belong to specific strings, numbers or any other object.

$Terminal
1 course = 'Python for Beginners'
2 print(course.upper())

Result:
PYTHON FOR BEGINNERS

When ever we run a dot operator it does not change the original string, its creates a new one and returns it, so if we were to print a variable after a dot operator, it would return the original string

$Terminal
1 course = 'Python for Beginners'
2 print(course.upper())
3 print(course)

There are time where you want to find a sequence of characters in a string using the find method

$Terminal
1 course = 'Python for Beginners'
	    0123
2 print(course.find('P'))

Result: 
0

If we do lower case o for example we get a result of 4, because the index of o is 4

$Terminal
1 course = 'Python for Beginners'
	    01234
2 print(course.find('o'))

Result:
4

Note that the find method is case sensitive, if you pass a letter that is not in the string, the result will be -1

$Terminal
1 course = 'Python for Beginners'
2 print(course.find('O'))

Result:
-1 

We can also pass a sequence of characters for example we could find Beginners, the result would be 11, since thats where Beginners begin

$Terminal
1 course = 'Python for Beginners'
	    01234567.. ^-11
2 print(course.find('Beginners'))

Result:
11

We may use the replace method to replace a single or multiple characters in a string, when using the replace method, we add a coma after the first string to replace it with the second string. 

%Terminal
1 course = 'Python for Beginners'
2 print(course.replace('Beginners', 'Absolute Beginners'))

Result:
Python for Absolute Beginners

Just like the find method the replace method is case sensitive. So if we try replace beginners with lower case, Python will not find the string we are looking for so it will return the original variable

%Terminal
1 course = 'Python for Beginners'
2 print(course.replace('beginners', 'Absolute Beginners'))

Result:
Python for Beginners

We may replace a single character in a string

$Terminal
1 course = 'Python for Beginners'
2 print(course.replace('P', 'J'))

Jython for Beginners

There are times where you want to check the existence of characters or sequence of characters in a string, for this, we will use a in operator. 

$Terminal
1 course = 'Python for Beginners'
2 print('Python' in course) we are checking to see if 'Python' is in our course variable, this is an expression that producers a boolean value, True or False
	
Result:
True

If we were to look for 'python' in course, it would come out to false because it cant find that specific sequence of characters

$Terminal
1 course = 'Python for Beginners'
2 print('python' in course)
	
Result:
False

Note, the difference between the in operator and the find method is that the find method will return the index of a character or sequence of characters and the in operator produces a boolean value

Strings recap: 
len() <- used to count the number of characters in a string, its a general purpose function
specific functions for strings are methods
course.upper() <- convert string to upper case
course.lower() <- convert string to lower case
course.title() <- convert the first letter of every word to uppercase and keeping the rest lowercase
course.find() <- returns the index of a character or sequence of characters
course.replace() <- replacing characters and words in a string
'characters you are looking for' in course <- find a string characters in a variable

########################################
# * Chapter 7: Arithmetic Operations * #
########################################
48:38 on YT

Integers: whole numbers that dont have a decimal point, example 10
Floats: Numbers with a decimal point, example 10.123

Python supports arithmetic operations, the same we have in math, adding, subtracting, etc

Examples:
$Terminal, remove wording after ending parenthesis
print(10 + 3) addition
print(10 - 3) subtracting
print(10 * 3) multiplication
print(10 / 3 ) division, this will give you a float
print(10 // 3) division, by adding 2 forward slashes, you will get the result as an integer, not a float
print(10 % 3) modulus, this returns the remainder of the division, 3 *3 = 9, remainder = 1
print(10 ** 3) exponent, to the power, 10 to the power of 3, 10 * 10 * 10 = 1000

Augmented assignment operator

$Terminal
1 x = 10 <- we assign a variable
2 x = x + 3
3 print(x)

line 2 - to add to our variable, we must run this code, remember Python runs from top to bottom so the original value of x is 10, since we are adding plus 3, the new value of x will be 13

Result: 
13

We can use the augmented assignment operator, we have enhanced the assignment operator

$Terminal
1 x = 10
2 x += 3
3 print(x)

line 2 - have can use this instead of the code above, we are adding plus 3 to the original value of x

Result:
13

You can use other math operations with augmented assignment operator

$Terminal
1 x = 10
2 x -= 3 <- new x will equal the old x minus 3, which is 7
3 print(x)

Result:
7

######################################
# * Chapter 8: Operator Precedence * #
######################################
51:37 on YT

Math operations follow the order of operations, below is a line of code, Python will follow the order of operations to give you a result for x. Some might think the answer is 26 but that is wrong, the correct answer is 16 because first we do 3*2=6, 10+6=16

$Terminal
1 x = 10 + 3 * 2
2 print(x)

Result:
16

Order of operations:
Parenthesis (2 + 3)
Exponentiation 2 ** 3
Multiplication or division * /
Addition or subtraction + -

What is the result for the line of code below?

$Terminal
1 x = 10 + 3 * 2 ** 2 
2 print(x)

Explanation and result: First you would do 2 to the power of 2, which is 4. We do multiplication next by doing 3 * 4 which is 12, last we do 10 plus 12 equals the result of 22

We may change the order of operations by adding parentheses  

$Terminal
1 x = (10 + 3) * 2 ** 2
2 print(x)

line 1 - first we do 10+3 which is 13, then we do 2**2 which is 4, finally we do 13*4 which is 52

Result: 
52

What would be the result of the line of code below?

$Terminal
1 x = (2 + 3) * 10 - 3
2 print(x)

Explanation and result: First you do 2 + 3 which is 5. Then we do 5 * 10 which is 50, finally we do 50 - 3 which is 47

#################################
# * Chapter 9: Math Functions * #
#################################
55:09 on YT

We can round numbers using the round function

$Terminal
1 x = 2.9
2 print(round(x))

Result: 
3

ABS function, or absoulute function will give you an absolute number that is always positive, even if the value is negative

$Terminal
1 x = 2.9
2 print(abs(-2.9))

Result: 
2.9

If you want to write a program that involves complex math calculations, you will need to import the math module. A module in Python is a seprate file that has some resuable code. We use the modules to organize our code into different files. Think of it like a grocery store, each isle is a module, for example one isle has fruits, another cleaning suplies, etc, each of those isle is a module. 

This is how you import the math module into Python

$Terminal
1 import math
2 print(math.ceil(2.9))

line 1 - now the math module is an object like a string, we can use its methods or functions using a dot operator, math.()
line 2 - math.ceil() will give you the ceiling of a number

Result:
3

$Terminal
1 import math
2 print(math.ceil(2.9))

line 2 - math.floor() will give you the floor of a number

Result:
2

If you want to learn more about math modules, look up "python 3 math module" in google, you will find the documentation of the functions listed there. Here is one link thats shows various functions, https://docs.python.org/3/library/math.html


#################################
# * Chapter 10: If statements * #
#################################
58:23 on YT

If statements allow us to make programs that make decisions based of some conditions

Below we will have some conditions set by this text file


conditions.txt

1 if it's hot
2 	It's a hot day
3 	Drink plenty of water
4 otherwise if it's cold
5 	It's a cold day
6 	Wear warm clothes
7 otherwise
8	It's a lovely day

line 1 - here is 1 condition
line 2 - tell user its a hot day
line 3 - tell the user to drink water
line 4 - here is another condition, if the condition is true it will tell the results below
line 5 - tell the user its a cold day
line 6 - tell user to wear more clothes
line 7 - another condition is if its neither hot or cold, it will tell the reselt below
line - tell user its a lovely day


To write a program using if statements we first will define some boolean variable

$Terminal
1 is_hot = True
2 
3 if is_hot:
4     print("It's a hot day")
5 print("Enjoy your day")

line 1 - we define a boolean variable
line 3 - when we add a colon, Pyton will automatically indent our cursor, it will execute any code if the boolean varibale is true
line 4 - This line of code will run if the above condition is true
line 5 -  Press Shift + Tab to return the cursor back the beginning, terminating the block above

We have set a boolean variabe that is true. We use a if statement to start a new block. Within the block we will print the "It's a hot day". We terminate the if statement block by pressing Shift + Tab which will return the cursos back the the beginning

Result:
It's a hot day
Enjoy your day

If we change the boolean value to False we will get this

$Terminal
1 is_hot = False
2 
3 if is_hot:
4     print("It's a hot day") 
5 print("Enjoy your day") 

Result:
Enjoy your day

We can add to our if statement block

$Terminal
1 is_hot = True
2 
3 if is_hot:
4    print("It's a hot day")
5    print("Drink plenty of water") 
6 print("Enjoy your day")

line 5 - we add this print statement to our block, as long a line is indented, it will be included to the if statement block
line 6 - Shift + Tab to end the if statement block and start a new line of code

Result:
It's a hot day
Drink plenty of water
Enjoy your day

If it is not a hot day, we can use the else function to run a different line of code

$Terminal
1 is_hot = False
2 
3 if is_hot:
4     print("It's a hot day")
5     print("Drink plenty of water")
6 else:
7     print("It's a cold day")
8     print("Wear warm clothes")
9 print("Enjoy your day")

line 3 - if this statement is true, the line of code below will run, if its false, the other line of code will run (else)
line 6 - the boolean value is false, therefore else will be executed 

Result:
It's a cold day
Wear warm clothes
Enjoy your day

We can use the elif function to add another condition

$Terminal
1 is_hot = False
2 is_cold = True
3 
4 if is_hot
5     print("It's a hot day")
6     print("Drink plenty of water")
7 elif is_cold
8     print("It's a cold day")
9     print("Wear warm clothes")
10 else:
11    print("It's a lovely day")
12 
13 print("Enjoy your day")

line 4 - Python will execute the if statement first, since it is false, it will ignore the 2 lines of codes indented below
line 7 - since the variable is true, it will run the 2 lines of codes indented below
line 10 - since one of conditions above is true, this else statement will be ingnored
line 13 - this line of code will always be presented since its its own line, seperate from the other statements


Result:
It's a cold day
Wear warm clothes
Enjoy your day
 
if <- if the condition is true, it will run the indented code below it
elif <- otherwise if the condition is false, it will run the indented code below elif 
else <- if the if and elif condition are not considered, Python will run the indented code below else

#Excercise: Write a program with these rules
Price of house is 1 million
If the buy has good credit,
 - they need to put down 10%
otherwise(if not)
 - they need to put down 20%

$Terminal
1 price = 1000000 
2 has_good_credit = True
3 
4 if has_good_credit: 
5     down_payment = 0.1 * price
6 else:
7     down_payment = 0.2 * price
8 print(f"Down payment: ${down_payment}")

line 1 - we set some variables
line 2 - set our boolean value
line 8 - we use a formatted string, we add a label "Down payment", we use curly brackets to present our down_payment variable, we also add a $ sign before the curly brackets so it shows a dollar sign before the variable


Result:
Down payment: $100000.0

#####################################
# * Chapter 11: Logical Operators * #
#####################################

We use logical operators in situatuons where we have multiple conditions (and)

conditions.txt
if applicant has high income AND good credit <- we have 2 conditions, high income and good credit, if they have both conditions, then they may get a loan
	Eligible for loan

$Terminal
1 has_high_income = True
2 has_good_credit = True
3
4 if has_good_credit and has_high_income:
5     print("Eligible for loan")

line 4 - if both conditions are true, then the indented code below will be run

Result:
Eligible for loan

If we change either of the boolean values to false, the if condition will not run the indented line of code because the conditions were not met

$Terminal
1 has_high_income = False
2 has_good_credit = True
3
4 if has_good_credit and has_high_income: 
5     print("Eligible for loan")

Result: it will have a blank space

We have the or operator as well, we can use it when we want to do certain things if at least one condition is true

conditions.txt
if applicant has high income OR good credit
	Eligible for loan

$Terminal
1 has_high_income = False
2 has_good_credit = True
3
4 if has_good_credit and has_high_income: 
5     print("Eligible for loan")

Result:
Eligible for loan

Since at least one of the conditions is true, it will give you the result. False, True or True, False, either will give you the same result. The key is that one must be true. If both boolean values are false, then you will not get a result, it will be blank

AND: both
OR: at least one
NOT: it will reverse any boolean value we give it

conditions.txt
if applicant has good credit AND doesnt have a criminal record
	Eligible for loan

$Terminal
1 has_good_credit = True
2 has_criminal_record = False
3
4 if has_good_credit and not has_criminal_record:
5     print("Eligible for loan")

Result: 
Eligible for loan

When we use the NOT operator, its changes the has_criminal_record to True which will give us 2 conditions that are true, first one being has_good_credit. If we were to not place not operator we wouldnt get our result since there is a false condition. By adding not to the criminal record, we reverse the boolean value to true allowing us to get the result. Think of it as saying, yes its true there is no criminal record so the result will be shown

If we have a true value to the criminal record, the result will not show since we have a false condition. 

$Terminal
1 has_good_credit = True
2 has_criminal_record = False
3
4 if has_good_credit and not has_criminal_record:
5     print("Eligible for loan")

Result: 

########################################
# * Chapter 12: Comparison Operators * #
########################################

We use comparison operators when we want to compare a variable with a value

conditions.txt
if tempurate is greater than 30
	it's a hot day
otherwise if it's less than 10
	it's a cold day
otherwise
	it's neither hot nor cold

$Terminal
1 temperature = 30
2
3 if temperature > 30:
4     print("It's a hot day")
5 else:
6     print("It's not a hot day")

Result:
It's not a hot day

We get the result above since the tempurature is not greater than 30

> - greater than operator
>= - greater than or equal to operator
< - less than operator
<= - less than or equal to operator
== - equality operator, for example, if the temp is 30 then print its a hot day, this is different than the assignment operator which only has one =. If we do not use two == then Python will think we are trying to set a value of 30 to tempurature.
!= - not equals to

#Exercise:

We will write a program where a user will write in a name and we will check if its too long or short, kind of like how you put in a new username

conditions.txt
if name is less than 3 characters long
	name must be at least 3 characters
otherwise if it;s more than 50 characters long
	name can be maximum of 50 characters
otherwise
	name looks good!

$Terminal
1 name = "J"
2 
3 if len(name) < 3:
4     print("Name must be at least 3 characters long")
5 elif len(name) > 50:
6     print("Name must be a maximum of 50 characters")
7 else:
8     print("Name looks good!")

line 3 - we use the len funtion on name to see if its less than 3 characters long
line 4 - if it is less than 3 characters long, this will be printed
line 5 - we use len function to see if its greater than 50 characters long
line 6 - if its greater than 50 characters long, this will be printed
line 8 - if the name is between 3 and 50 characters long, this will be printed

Result:
Name must be at least 3 characters long

####################################
# * Chapter 13: Weight Converter * #
####################################
1:16:23 on YT

We will create a program that will convert kg or lbs or vice versa

First we need to get some inputs from the user, we then create variables from the inputs of the user, then we need to create if statement to see which unit to convert, lbs or kg

$Terminal
1 weight = int(input('Weight: ')) 
2 unit = input('(L)bs or (K)g: ')
3 if unit.upper() == "L":
4     converted = weight * 0.45 
5     print(f"You are {converted} kilos")
6 else:
7     converted = weight // 0.45
8     print(f"You are {converted} pounds")

line 1 - we ask the user to input their weight, we stpre the value in weight variable, since we cannot mutiply a string by a float, we must use the int function to convert the weight value into a interger
line 2 - we also ask the user to input if their weight is in Lbs or Kg, we store the value in the unit variable
line 3 - we need to add the upper dot operator to convert what ever the user inputs into a upper case L
line 4 - we mulitply the users weight by 0.45, we store the value in the converted
line 5 - we use a formatted string and curly brackets to add out variables

Result: 
will convert what ever you input

###############################
# * Chapter 14: While Loops * #
###############################
1:20:49 on YT

We use while loops to execute a block of code multiple times. Its good for interactive programs and games.

We start by writting a while statement followed by a condition, as long as the condition is met it will run the indented code

$Terminal
1 i = 1
2 while i <= 5:
3     print(i)
4     i = i + 1
5 print("Done")

line 1 - we set a variable
line 2 - we set the condition that, as long as i is less than or equal to 5, it will run the indented code below
line 3 - i will be printed here
line 4 - we will increase the value of i untill the condition is not met, therefore the indented code will stop running
line 5 - when the conditions are not met anymore, this line of code will be executed

Result:
1
2
3
4
5
Done

We can make things interesting by adding strings to the expressions

$Terminal
1 i = 1
2 while i <= 5:
3     print('*' * i)
4     i = i + 1
5 print("Done")

line 3 - what will happen is the asterisks will multiply itself by the value of i and print the result

Result:
*
**
***
****
*****
Done

It is the same process as above however we are printing the asterisks multiplied by the value of i. It will keep making a half pyramid until i is greater than 6, then line 6 will be executed since the condition in line 2 i not met

#################################
# * Chapter 15: Guessing game * #
#################################
1:24:14

We are going to create a guessing game where you will have 3 tries to figure out the secret number otherwise it will say you have failed
You can rename name variables by doing Shift F6

$Terminal
1 secret_number = 9
2 guess_count = 0
3 guess_limit = 3
4 while guess_count < guess_limit: 
5    guess =  int(input('Guess: '))
6    guess_count += 1
7    if guess == secret_number:
8        print('You won!')
9        break 
10 else: 
11     print('Sorry, you have failed')

line 1 - we set our number that the user must guess
line 2 - starting with 0 guess counts
line 3 - settings our limit for guesses
line 4 - our condition we set is as long as the guess count is less than 3 (guess limit), the indented code will run
line 5 - we get our input from our user, we get it as a string, we need to convert it into a interger, we store all of that in the guess variable
line 6 - each guess we add 1 to our guess count
line 7 - we use an if statement to set that if the user guessess the secret number, the indented line of code below will 
line 9 - we use the break function to end the while loop, otherwise it will keep asking you to guess
line 10 - if we run out of guess, the conditin of the while loop will not be met and this else statement will run, guess the right number else you have failed

First we set our variables, try to write out logical names for the variables so that others may understand it better. We use a while loop to keep our user guessing. The condition of the the while loop is that the guess count variable must be less than 3 guesses, otherwise it will print, sorry, you have failed. In our while loop, in the indented line of code, we ask the user for a guess, we store that value in a input, we convert the input into a interger and store that as guess variable. After making a guess, the guess count value gets increased by 1. If the user guesses the right number, so if the user input the correct number it will print you won and break (stop) the while loop. If the user keep guessing, and the guess count reaches 3, it will print sorry you have failed. Guess the right amount of times, else you have failed.

############################
# * Chapter 16: Car Game * #
############################
1:30:58

We are going to make a game where we can start and stop a car, we may quit from the program and ask for help

$Terminal
1 command = ""
2 while command.lower() != 'quit':
3     command = input("> ")
4     if command.lower() == "start":
5         print("Car started...")
6     elif command.lower() == "stop":
7         print("Car stopped.")

line 1 - we set a command variable with an empty string
line 2 - we set a while condition, while command does not equal to quit, the indented code below will run. The user may type in lower or upper case quit so we will have to add a lower or upper operator after our command. You choose which one you want, for this tutorial we are using lower
line 3 - we will need the user to enter a command. we use the input function, and what ever the user inputs will be stored in the command variable
line 4 - if the user inputs start, then the string from line 5 will be printed
line 6 - otherwise if the user inputs stop, the string from line 7 will be printed

Note: we have a term in coding to represent code that gets repeated over and over, its called dry (dont repeat yourself)

We can fix this by removing the dot operator from the command variable and add it to the end of our input function in line 3, that way, everything that the user inputs will be changed to lower case, or uppcase case if you chose so

$Terminal
1 command = ""
2 while command != 'quit':
3     command = input("> ").lower() <- add lower operator here
4     if command == "start":
5         print("Car started...")
6     elif command == "stop":
7         print("Car stopped.")

We will need to add a help option to our game as well as put in a message if the user inputs a command the program does not know

$Terminal
1 command = ""
2 while command != 'quit':
3     command = input("> ").lower()
4     if command == "start":
5         print("Car started...")
6     elif command == "stop":
7         print("Car stopped.")
8     elif command == "help":
9         print('''
10        start - to start the car
11        stop - to stop the car
12        quit - to quit
13        ''')
14    else:
15        print("Sorry I don't understand that!")

Our program didnt work. The reason is that the way we currently have our program set up is that it compares the input of the user with the if and elif statements. In our case if the inputs anything other than start, stop, help, it will print the sorry i dont understand that message. To fix this we will add an elif statement after line 13 with our command variable, if the user inputs quit, it will run the indented code below and break. Since we have a duplicate of code in line 13 and line 2, what we can do is remove the condition and replace it with True condition, what that means is that the indented lines of code will keep executed until we break out of it. 

$Terminal

1 command = ""
2 while True:
3     command = input("> ").lower()
4     if command == "start":
5         print("Car started...")
6    elif command == "stop":
7          print("Car stopped.")
8     elif command == "help":
9         print('''
10        start - to start the car
11        stop - to stop the car
12        quit - to quit
13        ''')
14    elif command == "quit":
15        break
16    else:
17        print("Sorry I don't understand that!")

Recap: We make a command variable and set it empty, reason its empty is that the it will store whatever the user inputs. We make a while statement with a True condition. The indented lines of code goes as follows, if the user enters any of the other variables, it will print its response below that variable, otherwise if the user inputs something that the program does not understand, it will tell the user sorry i dont understand. To exit out of the program the user must input break and the program will stop

To remove all the space to the left of the text we simply delete the space to the left of the text. When we use triple quotations what ever the message is, it will be printed exactly how it is. 
 
$Terminal
8     elif command == "help":
9         print('''
10 start - to start the car
11 stop - to stop the car
12 quit - to quit
13        ''')

We still run into 1 more issue when we start or stop the car a second time, the same message appears. We can fix this by adding a boolean value if its true or false, is the car started or not

$Terminal
1 command = ""
2 started = False
3 while True:
4     command = input(" ").lower()
5     if command == "start":
6         if started:
7             print("Car is already started!")
8         else:
9             started = True
10            print("Car started!")
11    elif command == "stop":
12        if not started:
13            print("Car is already stopped!")
14        else:
15            started = False
16            print("Car stopped.")
17    elif command == "help":
18        print('''
19 start - to start the car
20 stop - to stop the car
21 quit - to quit
22        ''')
23    elif command == "quit":
24        break
25    else:
26        print("Sorry I don't understand that!")

line 2 - we add anothe variable so see if the car is started or not
line 8,9,10 - if the user starts the car and tries start it again, our boolean value will be true so it will print the message, car is already started
line 14,15,16- same as above but turning the car off
line 12 - we use the not operator to see if the car is not started

#############################
# * Chapter 17: For Loops * #
#############################
1:41:55

We use a for loop to iterate over items of a collections, such as a string. It will go over

$Terminal
1 for item in'Python':
2     print(item)

line 1 - we use the for function to look up items using the in function in our string Python, what that means it will print each character one by one

Result:
P
y
t
h
o
n

We can define a list using square brackets, list of clients, names etc

$Terminal
1 for item in ['Mosh', 'John', 'Sarah']:
2    print(item)

Result:
Mosh
John
Sarah

Same goes for numbers

$Terminal
1 for item in [1, 2, 3, 4]:
2     print(item)

Result: 
1
2
3
4

If we want to itirate over a large list of numbers, we can use a range function to look for specific numbers or items 

$Terminal
1 for item in range(10):
2     print(item)

Result: 
0
1
2
3
4
5
6
7
8
9

It will print a range from 0- 10 but will not include 10

We may also look for a specific range of numbers

$Terminal
1 for item in range(5, 10):
2    print(item)

Result:
5
6
7
8
9

We may also add steps to our range finder, the first 2 numbers are the range to look in between and the 3 number is the steps it will take. So start from 5, it will take steps of 2 until 10

Result:
5
7
9

#Exercise: We must calculate the price of all the items in our shopping cart

$Terminal
1 prices = [10, 20, 30]
2
3 total = 0
4 for price in prices:
5     total +=  price
6 print(f"Total: {total}")

Result: 
60

line 1 - we create a prices variable that shows the prices of our shopping cart
line 3 - we create a total variable that will show the total ammount of price of all items, we set this outside our for loop
line 4,5 - we set a while loop with the condition that the total of the prices will be all the individual price added up together
line 6 - we print our result using a formated string

###############################
# * Chapter 18: Nested Loops* #
###############################
1:47:55

Nested loops are loops inside another loop, we can generate a list of coordinates (x,y) for exmaple

$Terminal
1 for x in range(4):
2     for y in range(3):
3         print(f'({x}, {y})')

line 1 - in our first iteration of our outer loop, x is 0
line 2 - in our first iteration of our inner loop, y is 0
line 3 - this will print our first iterations of the loop

Result:
(0, 0)
(0, 1)
(0, 2)
(1, 0)
(1, 1)
(1, 2)
(2, 0)
(2, 1)
(2, 2)
(3, 0)
(3, 1)
(3, 2)

The first iteration the program will print 0,0. Then the inside loop will keep running within its range. Think of it as the outside loops will once, then the inside loop will run within its range, then go back to the outside loop once, then again run the inside loop within range

#Exercise: Below will a result, it will be a letter F made out of x's. The challenge is to write out code to convert a list of numbers into x's in the shape of a F

numbers to iterate over: [ 5, 2, 5, 2, 2]

We can cheat and use a line of code like this below:

$Terminal
1 numbers = [5, 2, 5, 2, 2]
2 for x_count in numbers:
3     print('x' *x_count)

Result:
xxxxx
xx
xxxxx
xx
xx

Lets try getting the same result using a inner loop

$Terminal
1 numbers = [5, 2, 5, 2, 2]
2 for x_count in numbers:
3     output:''
4     for count in range(x_count):
5         output += 'x'
6     print(output)

line 3 - we set a variable with a empty string
line 4 - we make a loop where we use the range function to generate a sequence of numbers from 0 up to x_count. In our case the first iteration of x_count is 5, so range of 5 would generate the numbers 0,1,2,3,4, so the loop will run 5 times
line 5 - we need to append ax x to our output variable, multiply the amount of x's with the variable
line 6 - after the inner loop completes it will print the result

Recap: We start with a variable containing a list of numbers. We have an outter loop where the x_count variable is set from the list of numbers in our list. Once we have our x_count number we also have a variable with an empty string. We then run our inner loop the ammount of times that the current iteration of x_count is, the first iteration the inner loop will run 5 times, resulting in x being printed 5 times, then we move to our outer loop and use the next number from the list which is 2, run the inner loop 2 times again and we get the result of 2 x's being printed out, so on and so on

########################
# * Chapter 19: Lists* #
########################
1:55:58

More info on lists

Lets set a list of names

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names)

Result:
['John', 'Bob', 'Mosh', 'Sarah', 'Mary']

When we print our names variable, it will print all of the strings with the names, including the brackets and quotation makrs. We may access an individual element using an index

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names[0])

line 1- our names variable with our list
line - we will print the name from the 0 index, in this case, its John, if we want to print Bobs name would write 1 instead of 0.

Result: 
John

We may also grab a name from the end using negative index 

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names[-1])

Result:
Mary

We may also use a colon to select a range of items

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names[2:])

line 2 - we will start from index 2 and print all names till the end

Result:
['Mosh', 'Sarah', 'Mary']


We can also specify an end index, so lets say we want to print from index 2 to 4, it will print all the names except for the last index

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names[2:4])

Result:
['Mosh', 'Sarah']

If we were to add 2 print functions, it wouldnt affect the original list, it will simply create a new list

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 print(names[2:])
3 print(names)

Result:
['Mosh', 'Sarah', 'Mary']
['John', 'Bob', 'Mosh', 'Sarah', 'Mary']

Lets say we want to change something in our list, lets say we want to remove the h from John

$Terminal
1 names = ['John', 'Bob', 'Mosh', 'Sarah', 'Mary']
2 names[0] = 'Jon'
3 print(names)

line 2 - we update the value of the name from the 0 index to Jon

Result:
['Jon', 'Bob', 'Mosh', 'Sarah', 'Mary']

#Exercise: write a program to find the largest number in a list

$Terminal
1 numbers = [3, 6, 2, 8, 4, 10]
2 max = numbers[0]
3 for number in numbers:
4     if number > max:
5         max = number
6 print(max)

line 1 - we have our list of numbers
line 2 - set our max variable
line 3 - we set a loop where its checking the number against numbers in the list
line 4 - we set a if condition where if the number is greater than max the indented code will run
line 5 - if the number is greater than max it will update the max variable to that number
line 6 - print highest number from the list

Result:
10

###########################
# * Chapter 20: 2D Lists* #
###########################
2:01:55

2D list are powerful and come in handy in data science and machine learning

Matrix - A rectangular array of numbers
2D list - a list that contains another lists 

this is a 3x3 matrix
    1 2 3
    4 5 6
    7 8 9

To access the items from a list we use the matrix function and square brackets to set which list you want to search and which item. For example if you want to grab the number 2 from the first list this is how you would do it

$Terminal
1 matrix = [
2     [1, 2, 3],
3     [4, 5, 6],
4     [7, 8, 9]
5 ]
6 print(matrix[0] [1])

line 1 - we use our matrix function and use square brackets to set a list
line 2 - again we use square brackets to create a list of items within a list, we repeat this until line 4
line 5 - ending square bracket to close off the list
line 6 - print the second items from first list. Remember, lists and items start from 0, not from 1

Result:
2

We may also alter the value of a item in a list by using the same syntax

$Terminal
1 matrix = [
2     [1, 2, 3],
3     [4, 5, 6],
4     [7, 8, 9]
5 ]
6 matrix [0][1] = 20
7 print(matrix[0] [1])

Result:
20

We may use nested loops to iterate over items in the matrix

$Terminal
1 matrix = [
2     [1, 2, 3],
3     [4, 5, 6],
4     [7, 8, 9]
5 ]
6 for row in matrix:
7     for item in row:
8         print(item)

line 6 - we make a nested loop where for each row in the matrix the indented line of code will run
line 7 - each row contains one list of items, for each item in the row the indented line of code will run
line 8 - print the items in rows in the matrix

Result:
1
2
3
4
5
6
7
8
9

################################
# * Chapter 19: List Methods * #
################################
2:06:09

List methods or functions are things we can do in lists

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 numbers.append(20)
3 print(numbers)

Result:
[5, 2, 1, 7, 4, 20]

line 1 - we set a variable with a list of numbers
line 2 - we can use the append function to add numbers
line 3 - we print our result with the number added to the list

If we wanted to place a number in a speciific spot we use the insert function

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 numbers.insert(0, 10)
3 print(numbers)

line 2 - we use the insert function to place items in our list. The first index will be the placement and the second index will be the item you want to insert

Result:
[10, 5, 2, 1, 7, 4]

We use the remove function to remove items from the list

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 numbers.remove(5)
3 print(numbers)

Result:
[2, 1, 7, 4]

We use the clear function to remove all the items from the list

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 numbers.clear()
3 print(numbers)

Result: 
[]

We use the pop function to remove the last item from a list

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 numbers.pop()
3 print(numbers)

Result:
[5, 2, 1, 7]

If we want to search for an item we use the index function, it will give you the index of where the first instance is

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 print(numbers.index(5))

Result:
0

What happens if we give a number that is not in the list?

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 print(numbers.index(50))

Result:
ValueError: 50 is not in list

We can use the in operator to check the existence of an item in a list, the result will be a boolean value

$Terminal
1 numbers = [5, 2, 1, 7, 4]
2 print(50 in numbers)

Result:
False

We use the count function to count the occurances of an item in a list

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 print(numbers.count(5))

Result:
2

We use the sort function to sort items in our list

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 print(numbers.sort())

Result:
None

None in python means there is no value. We get this result cause are trying to print the sorting function. We need to sort our list and then print the result

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 numbers.sort
3 print(numbers)

Result:
[1, 2, 4, 5, 5, 7]

We use the reverse function to reverse our list

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 numbers.sort()
3 numbers.reverse()
4 print(numbers)

Result:
[7, 5, 5, 4, 2, 1]

We use the copy function to items or lists

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 numbers2 = numbers.copy()
3 numbers.append(10)
4 print(numbers)

line 2 - we create a new variable and copy our original list
line 3 - we add 10 to our original list
line 4 - our original list 

Result:
[5, 2, 1, 5, 7, 4, 10]

When we copy stuff, it creates a new list, so when we copy our first list, it ceates a new list of the copied items. When we add something to that original list, the copied list is not affected

$Terminal
1 numbers = [5, 2, 1, 5, 7, 4]
2 numbers2 = numbers.copy()
3 numbers.append(10)
4 print(numbers2)

Result:
[5, 2, 1, 5, 7, 4] 

10 is not added in the result since we copied the original list before added the 10

#Exercise: Create a program that removes duplicates

$Terminal
1 numbers = [2, 2, 4, 6, 3, 4, 6, 1]
2 uniques = []
3 for number in numbers:
4     if number not in uniques:
5         uniques.append(number)
6 print(uniques)

line 1 - list of numbers
line 2 - leave this blank, we will need to iterate over the first list and if we dont have that number in the second list it will be placd in the second list
line 3 -  checking to see if we have the number from the list
line 4 - if we dont have the number from our unique list then line 5 will be executed
line 5 - then we add that number to that uniques list

Result:
[2, 4, 6, 3, 1]

##########################
# * Chapter 20: Tuples * #
##########################
2:13:34

Tuples are lists of items, however with Tuples we can not modify them, they are inmutable. We set tuples by using parenthesis instead of square brackets. We can only get info on tuples, so we can use count and index dot operator

$Terminal
1 numbers = (1, 2, 3)
2 print(numbers[0])

line 1 - we set out tuple with parenthesis
line 2 - we print our numbers 

Result:
1

If we try changing the tuple, we get an error

$Terminal
1 numbers = (1, 2, 3)
2 numbers[0] = 10
3 print(numbers[0])

Result:
TypeError: 'tuple' object does not support item assignment


#############################
# * Chapter 21: Unpacking * #
#############################
2:15:45

Instead of creating a variable with the coordinates item index, we assign a variable over the tuples index, think of it as labeling over the index with a variable.

$Terminal
1 coordinates = (1, 2, 3)
2 x = coordinates[0]
3 y = coordinates[1]
4 z = coordinates[2]
5
6 x, y, z = coordinates

line 1 - we set our tuple with these items
line 2,3,4 - we create new variables to assign to each item from the tuple

This is one approch we can do however it leads to a lot of code, we can condense all of this into something like in line 6

line 6 - we label each index directly from the tuple, instead of writing out new variables with the index 

################################
# * Chapter 22: Dictionaries * #
################################

We use dictionaries in situations where we want to store info that comes in as key value pair

Name: John Smith
Email: john@gmail.com
Phone: 1234

Things like name, email, phone are keys, the info is store as values, together making them a key value pair

The values to our keys can be almost anything, a string, a number, a boolean, etc

$Terminal
1 customer = {
2     "name": "John Smith",
3     "age": 30,
4     "is_verified": True
5 }
6 print(customer["name"])

Result:
John Smith

If you try passing a key that does not exist it will give you a key error. If you searched for "Names" it will give you the same error since its case sensitive

If we were to run the same code as above but use a capital N we get an error
6 print(customer["Name"])

KeyError: 'Name'

We can use the get method to get the same result, however if use the get method, Python will not give us errors 

$Terminal
1 customer = {
2     "name": "John Smith",
3     "age": 30,
4     "is_verified": True
5 }
6 print(customer.get("birthdate"))

Result:
None 

We can supply a default value, so if our key does not have a value we can add one in

1 customer = {
2     "name": "John Smith",
3     "age": 30,
4     "is_verified": True
5 }
6 print(customer.get("birthdate", "Jan 1 1980"))

Result:
Jan 1 1980

We can update the key values

$Terminal
1 customer = {
2     "name": "John Smith",
3     "age": 30,
4     "is_verified": True
5 }
6 customer["name"] = "Jack Smith"
7 print(customer["name"])

line 6 - we modify our key "name"

Result: 
Jack Smith

We can add new keys in

$Terminal
1 customer = {
2     "name": "John Smith",
3     "age": 30,
4     "is_verified": True
5 }
6 customer["birthdate"] = "Jan 1 1980"
7 print(customer["birthdate"])

Result:
Jan 1 1980

#Exercise, create a program where you input your numbers and it outputs the numbers in text

$Terminal
1 phone = input("Phone: ")
2 digits_mapping = {
3     '1': 'One',
4     '2': 'Two',
5     '3': 'Three',
6     '4': 'Four',
7 }
8 output = ""
9 for ch in phone:
10    output += digits_mapping.get(ch, "!") + " "
11    print(output)

line 1 - create a input variable that will ask the user for input
line 2 - create a variable with out list
line 8 - create a output variable with an empty string that
line 9 - we set out conditions where for each character in out phone lists
line 10 - our condition is the input from the user will get the text version of that number
line 11 - print the text version of what the user inputs

###################################
# * Chapter 23: Emoji Converter * #
###################################
2:26:32

We are going to build a progrma that will convert text into emojis

We start with something simple where it will print what the user inputs. We use the split function here to split everything into strings

$Terminal
1 message = input(">")
2 words = message.split(' ')
3 print(words)

Result:
['Good', 'morning', 'sunshine']

line 1 - the message variable with contain what the use inputs, we use a greater than symbol as it is an indicator for the user to type a message
line 2 - the words variable will contain the input of the user and split the input into strings
line 3 - print each word or string

$Terminal
1 message = input(">")
2 words = message.split(' ')
3 emojis = {
4     ":)": "😊",
5     ":(": "😞",
6 }
7 output = ""
8 for word in words:
9     output += emojis.get(word, word) + " "
10 print(output)

Result:
Good morning sunshine 😊 

lines 1 and 2 are the same as above
lines 3 to 6 we set our list using squigly brackets 
line 7 - we set an output and leave it empty
line 8 and 9 - we set a for loop, where for each word in our words variable, it will check our list. If the key word is there, it will get its new emoji value from the list, if its key word is not there, the original value is passed through. We use the get method to supply a default value, we want to get an item with the key word, otherwise use that word a default value. We also add a space at the end

###########################
# * Chapter 24: Functions #
###########################
2:30:42

A function is a container for a few lines of code that preform a specific task. We use def or define a function. Give a descriptive name for your functions and use lower case

$Terminal
1 def greet_user():
2     print('Hi there!')
3     print('Welcome aboard')
4
5
6 print("Start")
7 greet_user()
8 print("Finish")

line 1 - we define our function by adding parenthesis and a colon. When ever we add a colon at the end of a line of code, we are telling Python we are defining a block of code. Blocks of code are indented and belong to the function
line 2 and 3 - what our block of code will do
line 4 and 5 - according to pep8, we add 2 blank lines after our function for the best format
line 6 - print the value
line 7 - we add our newely defined function
line 8 - print the result

Result:
Start
Hi there!
Welcome aboard
Finish

############################
# * Chapter 25: Parameters #
############################
2:35:32

Parameters are placeholders for receiving information

$Terminal
1 def greet_user(name):
2     print(f'Hi {name}!')
3     print('Welcome aboard')
4 
5 
6 print("Start")
7 greet_user("John")
8 print("Finish")

line 1 - we add a name parameter in our function
line 2 - we will use a formated string and add our name parameter
line 7 - we set our name parameter to John

Result: 
Start
Hi John!
Welcome aboard
Finish

We can use the function over and over again with new value in our parameters. If we did not have the function we would have to repeat code over and over again

$Terminal
1 def greet_user(name):
2     print(f'Hi {name}!')
3     print('Welcome aboard')
4
5
6 print("Start")
7 greet_user("John")
8 greet_user("Mary")
9 print("Finish")

Result:
Start
Hi John!
Welcome aboard
Hi Mary!
Welcome aboard
Finish

Note: When a function has a parameter, we are obligated to give it a value, otherwise it will give us an error

$Terminal
1 def greet_user(name):
2     print(f'Hi {name}!')
3     print('Welcome aboard')
4
5
6 print("Start")
7 greet_user()
8 greet_user("Mary")
9 print("Finish")

Result:
    greet_user()
TypeError: greet_user() missing 1 required positional argument: 'name'

Parameters are the holes or placeholders that we define in our function for receiving information. Arguments are the actual pieces of information that we supply to the function. We can also define multiple parameters.

$Terminal
1 def greet_user(first_name, last_name):
2     print(f'Hi {first_name}, {last_name}!')
3     print('Welcome aboard')
4 
5 
6 print("Start")
7 greet_user("John", "Smith")
8 print("Finish")

line 1 - we add a first and last name parameter, we use a comma to seperate the parameters
line 2 - use the formated string with our first and last name parameters
line 7 - same as line 1, we add a comma and our second value to represent the second parameter

Result:Start
Hi John, Smith!
Welcome aboard
Finish

###################################
# * Chapter 26: Keyword Arguments #
###################################
2:39:36


Whenever we define parameters for our functions we should always supply values otherwise we get errors. Positional arguments are the arguments placed specifically so their position matters. In Python we also have keyword arguments and their positions do not matter.

We use the same code as the one from the earlier chapter

$Terminal
1 def greet_user(first_name, last_name):
2     print(f'Hi {first_name}, {last_name}!')
3     print('Welcome aboard')
4
5
6 print("Start")
7 greet_user(last_name="John", last_name="Smith")
8 print("Finish")

line 7 - we add the keyword arguments before our value

We can improve the visibility of code by adding keyword arguments, it comes in handy when we are working with numerical values

$Terminal
1 def greet_user(first_name, last_name):
2     print(f'Hi {first_name}, {last_name}!')
3     print('Welcome aboard')
4
5
6 print("Start")
7 greet_user(last_name="John", last_name="Smith")
8 calc_cost(total=50, shipping=5, discount=0.1)
9 print("Finish")

line 8 - we used keyword arguments to display what the values mean so its visible for others to see and understand. We could of removed the keyword arugments and left just the numbers but that might confused some people

For the most part, use positional arguments, but if you are using a function that takes numberical values see if you can impove the visibility of your code by using keyword arguments. If you were to add a keyword argument to the first value and a positional argument for the second value Python will yell at you that Positional argument after keyword argument. If we were to add a keyword argument after our positional arguemnt, Python would not have a problem with that.

##################################
# * Chapter 27: Return Statement #
##################################
2:45:06

We are going to create functions that return value, this is useful if we are doing some sort of calculation in our function and we want to return the to whoever is using our function

Below we are going to define a square function

$Terminal
1 def square(number):
2     return number * number
3
4 result = square(3)
5 print(result)

line 1 - we defne a square function, we add a number parameter
line 2 - we use the return statement if we want to return the number outside of the function
line 4 - we use the square function with a parameter of 3 and we store the value of that in the return variable

Result:
9

We can also pass the function call directly in our print function without defining a seperate variable. This is useful if we want to write shorter code

$Terminal
1 def square(number):
2     return number * number
3 
4 print(square(3))

We can remove the result variable from our last lines of code and pass our square function as an argument for our print function
line 4 - add our square function directly to our print function

Result:
9

What happens if we remove the return statement?

$Terminal
1 def square(number):
2     print(number * number)
3
4 print(square(3))

Result:
9
None

When we run this program Python interpretor will call the square function first, so we get our 9 result. By default all function return the value None, so if we do not a return statement after line 2, by default Python will return None because it is printing the value of None squared

##############################################
# * Chapter 28: Creating a reusable function #
##############################################

We will use our code we made in the emojis chapter 2:26:21 and reorganize by exracting a function out of it

$Terminal
1 def emoji_converter(message):
2     words = message.split(' ')
3     emojis = {
4         ":)": "😊",
5         ":(": "😞",
6     }
7     output = ""
8     for word in words:
9         output += emojis.get(word, word) + " "
10        return output
11
12
13 message = input(">")
14 print(emoji_converter(message))

line 1 - we define our function and name it emoji converter, this functions takes a parameter called message
line 2 to 9 - we copy and paste our code from the emoji converer chapter
line 10 - we add return statement 
line 14 - we call the emoji converter function and print the result

############################
# * Chapter 29: Exceptions #
############################
2:53:54

We are going to learn how to handle errors in our program. We will create a program where we ask the users age from the terminal

$Terminal
1 age = int(input('Age: '))
2 print(age)

If we enter our age, you will see that Python will say its exit code is 0, which means the program has termiated successfuly
If we were to enter something asd, we will get ValueError: invalid literal for int() with base 10: 'asd' which means the string asd a valid whole number that can be converted to an interger and our program crashed

In Python we have construct named try except. We use it to hand erros

$Terminal
1 try:
2     age = int(input('Age: '))
3     print(age)
4 except ValueError:
5     print('Invalid value')

line 1 - we add our try construct, it will try to run the line of code indented in it
line 4 - we add our except block along with the error it might encounter, in this case its ValueError. What this means is, if in our try block we encounter a ValueError, we will print Invalid value in line 5

What happens if we were to add 0 to our age? technically speaking we shouldnt get any erros. When we run our program we will get an error ZeroDivisionError: division by zero. We can fix this by adding another exception that looks for the ZeroDivisionError

$Terminal
1 try:
2     age = int(input('Age: '))
3     income = 20000
4     risk = income / age
5     print(age)
6 except ZeroDivisionError:
7     print('Age cannot be 0.')
8 except ValueError:
9     print('Invalid value')

line 6 - Python will look for ZeroDivisonError and will run its indented code in line 7

##########################
# * Chapter 30: Comments #
##########################

We can add comments in our code by add #. We use them to explain how and why things are written, not why it is written. Its useful when explainng what a certain function does. If you want to write multiple comments make sure to add a # before each comment

$Terminal
1 #yoooooo
2 # hello there
3 print("Sky is blue")

#########################
# * Chapter 31: Classes #
#########################
3:01:59

We use classes to define different types (numbers, strings, booleans, lists, dictionaries, etc). The convention we use for naming our classes is different from the convention we use for variables and functions. For variables and functions we always use lower case and we seperate numerous words with an underscore. When we use class we capitalize all the words and we do not use an underscore to seperate the words

#Example
$Terminal
1 class EmailClient
2 class Point

An object is an instance of a class. The class defines the blueprint for creating objects. To create an object we type out the name of our class and call it like a function, this creates a new object and returns it, so we can store that object in a variable. Our objects may have atributes and they are like variables that belong to a particular object.

$Termianl
1 class Point:
2     def move(self):
3         print("move")
4 
5     def draw(self):
6         print("draw")
7
8
9  point1 = Point()
10 point1.x = 10
11 point1.y = 20
12 print(point1.x)
13 point1.draw()
14
15 point2 = Point()
16 point2.x = 1
17 print(point2.x)

line 1 - we use classes the define new types
line 2 and 5 - we define methods for our class
line 9 through 17 - we give attributes to our class and print some stuff

##############################
# * Chapter 32: Constructors #
##############################
3:07:58

A constructor is a function that gets called at the time of creating an object. We use the initialize method when we create a new object

$Terminal
1 class Point:
2     def __init__(self, x , y):
3         self.x = x
4         self.y = y
5
6     def move(self):
7         print("move")
8
9     def draw(self):
10        print("draw")
11
12
13 point = Point(10, 20)
14 print(point.x)

line 1 - name our class
line 2 - we define an initialize function, after self we add 2 parameters, x and y
line 3 - we initialize our objects, self is a refrence to our object, in this case x is 10
line 4 - same as above but for y
line 13 - we create a variable and store our class in there with its x value being 10 and its y value being 20
line 14 - we print our point variables x value

Result:
10

#Excercise - we will define a new type, person, this person object should have a name attribute and a talk method

$Terminal
1 class Person:
2     def __init__(self, name):
3         self.name = name
4     def talk(self):
5         print(f"Hi, I am {self.name}")
6 
7 
8 john = Person("John Smith")
9 john.talk()
10 
11 bob = Person("Bob Smith")
12 bob.talk()

line 1 - name our class
line 2 - define an initialize function, we add our name parameter
line 3 - we initialize our object, we are refrencing name to our John Smith
line 5 - we add a formated string with the refrence to our objects name, in this case John Smith and print the message
line 8 - we create our person object 
line 9 - have our person run the talk function
line 11 - create another person object
line 12 - have our person run the talk function

Result:
Hi, I am John Smith
Hi, I am Bob Smith

#############################
# * Chapter 33: Inheritance #
#############################
3:14:54

Inheritance is a mechannism for using code. Lets say we have a problem in a method, and we have multiple methods in other places, we would have to come back to every single place and fix the code. Thats why in programming we should not define something twice

$Terminal
1 class Dog:
2     def walk(self):
3         print("walk")
4
5
6 class Cat:
7     def walk(self):
8         print("walk")

See how we are defining stuff twice, we can solve this creating a mammal class and the dog and cat class inherite the methods

$Terminal
1 class Mammal:
2     def walk(self):
3         print("walk")
5
6
7 class Dog(Mammal):
8     pass
9
10
11 class Cat(Mammal):
12     pass        
13
14 dog1 = Dog()
15 dog1.walk()


line 1 through 3 - we create a mammal class and give it the walk method that we use for dog and cat
line 7 and 11 - we add the Mammal class in our dog and cat class to inherite what Mammal has
line 8 and 12 - we use pass to tell Python, move on the next line of code

We can add a method specific to a class

$Terminal
1 class Mammal:
2     def walk(self):
3         print("walk")
4
5
6 class Dog(Mammal):
7     def bark(self):
8         print("bark")
9
10
11 class Cat(Mammal):
12    def be_cute_and_amazing(self):
13        print("Meow meooooow")
14 
15 cat1 = Cat()
16 cat1.be_cute_and_amazing()

#########################
# * Chapter 34: Modules #
#########################
3:19:46

A module is file with some Python code. We use modules to organize our code into different files, just like different sections in a market. Lets make a simple kg to lbs converter and save the file. We will import that file in and use it

converters.py - name the file this, we will use it later 
$Terminal
1 def lbs_to_kg(weight):
2     return weight * 0.45
3
4
5 def kg_to_lbs(weight):
6     return weight / 0.45

Open a new file and lets import our converters file

$Terminal
1 import converters
2
3 print(converters.kg_to_lbs((76))

Result:
168.8888888...

We can also import specific functions from a module

$Terminal
1 import converters
2 from converters import kg_to_lbs
3
4 kg_to_lbs(76)
5 
6 print(converters.kg_to_lbs((76)))

line 2 - from our converters file we can import any function by holding down control and space on keyboard, this will pull up all the functions in that module
line 4 - we can call this function, we do not have to use the converters prefix like we had to use in line 6

We can save time by importing a specific function from a module instead of having to write out the modules prefix and then the function everytime we want to use it, we will end up with dry code

#Exercise: Earlier in the course we had an exercise that had us look for the largest number in a list. We will create a utils module, inside that module we will have a function that will find the largest number in a list. Import the utilis module into the current module and call the findmax function, print the result

Solution:

$Terminal
1 from utils import find_max
2
3 numbers = [3, 6, 2, 8, 4, 10]
4 max = find_max(numbers)
5 print(max)
 
line 1 - from our utilis.py file, we import the find max function
line 3 - we define our list before we call from it
line 4 - we create a max variable that will contain the find max function, which it is pulling from the numbers list from line 3
line 5 - print result

Result:
10

Now one last thing before we finish this tutorial, here we have this little warning under max and the tool tip says shadows built in name max. The reason we see this is because we actually have a function called max. And it does the exact same job as our find max function. So this is actually built into python. But I ask you to do it as an exercise because it's a great exercise for beginners. Now, back to the warning, this warning is basically telling us that we are overwriting the built in max function in python so we are changing the meaning of this function, and this is considered a bad practice. 

What happens if we try to print the max number using the max function built into Python? 

$Terminal
1 from utils import find_max
2
3 numbers = [3, 6, 2, 8, 4, 10]
4 max = find_max(numbers)
5 print(max(numbers))

Rresult:
TypeError: 'int' object is not callable

We get this type error, int object is not callable, because max is now an integer, it's not a function, so we cannot call it. So to solve this problem, we can rename this variable to something else.

##########################
# * Chapter 35: Packages #
##########################
3:30:27

Packages are another way to organize code. A project may contain hundreds if not thousands of modules, we dont want add all those modules, over time the directory. A better approach is to organize related modules, inside of a package, so a package is a container for multiple modules In file system terms a package is a directory or folder

We can create a new python package, let's call our package ecommerce as you can see pycharm automatically creates this file for us so we don't have to manually create it. In this module we want to have a function for calculating the shipping costs.

$Terminal
1 def calc_shipping():
2     print("calc_shipping")
    

There are two ways to import this module. We can import the entire module or we can import one of it's functions or classes. So let me show you both approaches. Instead of typing import shipping we type import ecommerce .shipping. we have to prefix it with the name of it's package

$Terminal
1 import ecommerce.shipping
2 ecommerce.shipping.calc_shipping()

However with this approach, every time you want to call one of the functions to this module, we'll have to prefix it with ecommerce. shipping. that is very verbose. So when working with packages we often use the second approach, using the from statement

$Terminal
1 from ecommerce.shipping import calc_shipping
2
3 calc_shipping()
4 calc_shipping()
5 calc_shipping()

Now we don't have to prefix this function with ecommerce.shipping, and we can call it multiple times in this module, so our code is a little bit shorter


But what if you want to use multiple functions in this shipping module? We can import the entire module and then access all the functions or classes in that module

$Terminal
1 from ecommerce.shipping import calc_shipping
2 
3 calc_shipping()

##########################################
# * Chapter 36: Generating random values #
##########################################
3:36:38

Python comes with a standard library that contains several modules for common tasks such as sending emails, working with date and time, generating random values and passwords and so on

Search "Python 3 module index" or look here https://docs.python.org/3/library/index.html

Lets import the random module. The random module generates a random number between 0 and 1

$Terminal
1 import random
2 
3 for i in range(3):
4    print(random.random())

line 1 - import the random module
line 3 - we use the range function to create a range object, in each iteration it will spit out a value
line 4 - print the 3 random iterations out

Result:
0.185176013804624
0.20914925765149406
0.2523156640613816

What if we want a random range between 10 and 20? we use the randint

$Terminal
1 import random
2 
3 for i in range(3):
4    print(random.randint(10, 20))

line 4 - we use randint to specify a random range, we give it 2 arguments

Result:
19
14
13
 
Lets say you have a list of team members and you want to pick a random team member

$Terminal
1 import random
2
3 members = ['John', 'Mary', 'Bob', 'Mosh']
4 leader = random.choice(members)
5 print(leader)

line 3 - create a members variable with their names
line 4 - create a leader variable where we use the random choice to choose from our member variable
line 5 - print the new leaders name

Result:
Bob

#Exercise: Create a program that will give you 2 random dice roll numbers. We need to define a class called dice. We will have a method called roll, every time we call the method we should get a tuple.

$Terminal
1 import random
2 
3 class Dice:
4 
5     def roll(self):
6         first = random.randint(1, 6)
7         second = random.randint(1, 6)
8         return (first, second)
9
10
11 dice = Dice()
12 print(dice.roll())

line 3 - we define a class Dice
line 5 - we define a roll method 
line 6 - we create a first variable that will generate a random value from 1-6 for its first roll
line 7 - same as above just as a second roll
line 8 - we return the first and second variables as a tuple, here we do not need parethesis if we are returning a tuple from a function
line 11 - we create a object of this type
line 12 - print the result

Result: 
(2, 4)

#######################################
# * Chapter 37: Files and Directories #
#######################################
3:44:52

Lets learn how to use directiories in Python. Lets go to the Path module in https://docs.python.org/3/library/index.html. It provides classes that we can create objects to work with directories

Absolute path: a path starting from the root
Relative path: a path starting from the current directory 

$Terminal
1 from pathlib import Path
2 
3 path = Path("ecommerce")
4 print(path.exists())

line 1 - import the Path module
line 3 - create a path object, we pass our ecommerce directory
line 4 - we check to see if the path exists

Result:
True

If we change the path to ecommerce1 it should give it False, since that path is not there

$Terminal
1 from pathlib import Path
2 
3 path = Path("ecommerce1")
4 print(path.exists())

Return:
False

We can create new path

$Terminal
1 from pathlib import Path
2 
3 path = Path("ecommerce1")
4 print(path.mkdir())

line 4 - mkdir is to make a new directory

Result:
None - if you look at the project panel you can see here we have a new directory called emails

.mkdir - make a new directory
.rmdir - remove a directory
.glob - this method searches for directories in the current path, we need to pass a string to define the search pattern
.glob('*') - asteriks searches for everything
.glob('*.*') - searches for all the files
.glob('*.py') - searches for all .py files

$Terminal
1 from pathlib import Path
2 
3 path = Path()
4 for file in path.glob('*.py'):
5     print(file)

line 4 - create a for loop where the generator object that is returned from the glob method
line 5- print the result

Result:
app.py

##############################
# * Chapter 38: Pypi and Pip #
##############################
3:51:02


