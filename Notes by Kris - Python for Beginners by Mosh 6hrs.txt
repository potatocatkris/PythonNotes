Hello! my name is Kris, I am a DevOps student who is learning Python. I got recommended this YT video to learn Python, while watching the video, I made some notes for everyone to enjoy. I hope this helps others, share it please, and dont stop learning friends.

Python Tutorial by Programming with Mosh
https://www.youtube.com/watch?v=_uQrJ0TkZlc

############################
# * Chapter 1: Variables * #
############################
13:05 on YT

Variables: temporarily store date on the computers memory
example: price = 10

price is the identifier with a value of 10

$Terminal practice

1 price = 10
2 price = 20
3 print(price)

The computer will produce the number 20 because the code will go line by line, 1, 2, finally 3

Variables: temporarily store data on the computers memory
Expression: piece of code that produces a value
Strings: sequence of characters
Integers: whole numbers without a decimal point
Floating Point Number (Float): numbers with a decimal point
Boolean: values that can be true or false

#Exercise, define 3 variable, name, age and is the patient new or not

John Smith, 20, is new patient

$Terminal
1 full_name = 'John Smith'
2 age = 20
3 is_new_patient = True

#########################
# * Chapter 2: Inputs * #
#########################
18:24 on YT

$Terminal:
input('What is your name? ')

the input function will print this message 'What is your name? ' on the terminal, and it will wait for the user to input a value. 

$Terminal:
1 name = input('What is your name? ')
2 print('Hi ' + name)

name is the variable we created, input is the function we are asking the computer to execute, in this case, the computer will ask the user 'What is your name? '

We want to greet the user with Hi *name of user* 

We use print('Hi ' + name), print is the function that will display the string 'Hi ' plus the name variable. Below is an example of what the computer should ask you if you run the commands above in terminal

What is your name? Potato
Hi Potato

#Exercise, ask 2 questions, what is a users name and favorite color. Then, print a message like "Potato likes blue

$Terminal
1 name = input('What is your name? ')
2 color = input('What is your favorite color? ')
3 print(name + ' likes ' + color)

First the computer will ask the user 'What is your name? ' it will store the value
Second the computer will ask the user 'What is your favorite color? ' it will store the value
Third we ask the computer to print the name of the user followed by the string ' likes ' followed by the favorite color of the user

The solution should look like this

Result:
What is your name? potato
What is your favorite color? blue
potato likes blue

##################################
# * Chapter 3: Type conversion * #
##################################
22:49 on YT

$Terminal
1 birth_year = input('Birth year: ')
2 age = 2024 - birth_year
3 print(age)

Running this code, the computer will ask the user what birth year the user was born in, it will then try to subtract the current year 2024 minus the birth year
We get an error in our code, it will show you the location of the file and in which line the error occurs

Error:
Traceback (most recent call last):
  File "C:\Users\potat\PycharmProjects\learingpython\app.py", line 2, in <module>
    age = 2024 - birth_year
          ~~~~~^~~~~~~~~~~~
TypeError: unsupported operand type(s) for -: 'int' and 'str'

We are getting a error because Python is trying subtract a string from an integer, it doesnt know what to do

int() - converting a string into an integer
float() - converting a string into a float (number with decimal point)
bool() - converting a string into a boolean value (true or false)

$Terminal
1 birth_year = input('Birth year: ')
2 age = 2024 - int(birth_year)
3 print(age)

We add the int() to our birth_year to convert the string into an integer that Python may use, if you this code and input your birth year, your age should appear

#Exercise: Ask a user their weight in pounds and convert it into kilo, print on the terminal

$Terminal
1 weight_lbs = input('Weight (lbs): ')
2 weight_kg = weight_lbs * 0.45
3 print(weight_kg)

Result:
Traceback (most recent call last):
  File "C:\Users\potat\PycharmProjects\learingpython\app.py", line 2, in <module>
    weight_kg = weight_lbs * 0.45
                ~~~~~~~~~~~^~~~~~
TypeError: can't multiply sequence by non-int of type 'float'

We cannot multiply a string by a float, we must convert weight_lbs into a float and then multiply

$Terminal
1 weight_lbs = input('Weight (lbs): ')
2 weight_kg = int(weight_lbs) * 0.45
3 print(weight_kg)

we add the int() function to weight_lbs to make the string into a float. If you run the code above you should be able to get your weight in pounds converted into kilos

##########################
# * Chapter 4: Strings * # 
##########################
29:35 on YT

$Terminal
1 course = ('Python's for Beginners')

Result:
  File "C:\Users\potat\PycharmProjects\pythonProject\app.py", line 1
    course = ('Python's for Beginners')
                                     ^
SyntaxError: unterminated string literal (detected at line 1)

We cannot add another quotation mark after Python because Python will understand that as a string and the code after it as mumbo jumbo
To fix this we may add double quotation marks at the beginning and end, with the single quotation mark being used in Python's

$Terminal
1 course = ("Python's for Beginners")
2 print(course)

Result: 
Python's for Beginners

If we want to add double quotation marks for "Beginners", we must place a single quotation mark at the beginning and end of the string, and double quotation marks "Beginners". 

$Terminal
1 course = 'Python for "Beginners"'
2 print(course)

Result:
Python for "Beginners"

We use triple quotation to define a string with multiple lines

$Terminal
1 course = ''' 
2 Hi Potato,
3 
4 Here is our first email to you
5 
6 Thank you, 
7 The Starchy Team
8
9 '''
10 print(course)

Result:
Hi Potato,

Here is our first email to you

Thank you, 
The Starchy Team

We may add brackets to get a character in a given index in a string

$Terminal
1 course = 'Python for Beginners'
2 print(course[0])

Result:
P

The index of the first character in this string is 0

$Terminal
1 course = 'Python for Beginners'
            0123456789....so on
2 print(course[0])

You can get the last character of a string by using -1 in brackets, if you use -3, it will grab the 3rd last character from that string

$Terminal
1 course = 'Python for Beginners'
2 print(course[-1])

Result:
s

We may extract multiple characters by using a colon within our bracket. 

$Terminal
1 course = 'Python for Beginners'
2 print(course[0:3])

Result:
Pyt

Python interpreter will return all characters starting from index 0 to index 3, but it does not show the last character

$Terminal
1 course = 'Python for Beginners'
2           0123
3 print(course[0:3])


There are default values, so if you do not provide a value it will default to 0

$Terminal
1 course = 'Python for Beginners'
2 print(course[0:]) <- since there is no value for the last index, it will default to 0, therefore all the characters in the string will be shown

Result: Python for Beginners

If you change the first index to 1, and have no value for the second index, it will show all the characters in the string except for the first one

$Terminal
1 course = 'Python for Beginners'
2 print(course[1:])

Result: ython for Beginners

We also have a default value for first index, it is 0, so if you leave the first index with no value, Python will assume 0 is the value

$Terminal
1 course = 'Python for Beginners'
2 print(course[:5])

Result: Pytho

If we have the first and second index with no value, Python will assume the value is 0, therefore the whole string will be copied
We may use this to copy string from variables

$Terminal
1 course = 'Python for Beginners' course variable holds 'Python for Beginners' 
2 another = course[:] another variable will copy whats in course variable
3 print(another)

Result: Python for Beginners

#Exercise: We write a name variable with the characters 'Jennfer'. We will print the name variable with an index of 1 and -1, what will be the result without running this in Python?

Explanation: We will use 'Jennifer' as a string, we will use [1:-1] as an index, what that means is, Python will show the characters from the 'Jennifer' string start with index 1 all the way to index -1 but will exclude the last character. Since strings characters start at 0123 etc etc, we will present the letter e since its at index 1, and we will present e also since its the last character from the string, excluding the last character r

$Terminal
name = 'Jennifer'
	01234567 <- start at index 1, which is e
	76543210 negative <- end -1 index, which is e, r will be excluded
print(name[1:-1])

Result: 
ennife

####################################
# * Chapter 5: Formatted Strings * #
####################################
37:40 on YT

Formatted strings are useful when you want to dynamically generate text with your variables

We want to print John [Smith] is a coder in the terminal, how do we do this?

Explanation:
$Terminal
1 first = 'John'
2 last = 'Smith'
3 message = first + ' [' + last + '] is a coder' 
^- we make a message variable, we add the first name, followed by the [ bracket in a string, plus the last name, plus a string that has the ending bracket ], followed by is a coder
4 print(message)

Result: John [Smith] is a coder

This method definitely works but it is not ideal to do so, because as our text becomes more complicated, it becomes harder to visual the output. Someone looking at the code would have to remember all the concatenations, we can use formatted strings to help us visualize the output

$Terminal
1 first = 'John'
2 last = 'Smith'
3 message = first + ' [' + last + '] is a coder'
4 msg = f'{first} [{last}] is a coder'
          ^- we use curly braces to define place holders or holes in our string. When we run our program these holes get filed with the value of our variables
5 print(message)

Result: 
John [Smith] is a coder - you should get the same result if you remove line 3, the formatted string should work

To define a formatted string, prefix your string with an F, and use curly braces to insert values into your strings

#################################
# * Chapter 5: String Methods * #
#################################
40:54 on YT

We can calculate the amount of characters in the string using the len function

$Terminal
1 course = 'Python for Beginners'
2 print(len(course))

Result:
20

This is useful when you get info from a user, for example, when you fill out a form online, the input fill often has a limit, example 50 characters max. Using the len function, we can enforce a character limit and display a error message to the user.

We can use a dot operator to convert all the characters in a string to lower case or upper case. The different functions you can use with a dot operator is technically called a method. When a function belong to something else or is specific to some kind of object we refer that function as a method. Len and print are general purpose functions, they dont belong to specific strings, numbers or any other object.

$Terminal
1 course = 'Python for Beginners'
2 print(course.upper())

Result:
PYTHON FOR BEGINNERS

When ever we run a dot operator it does not change the original string, its creates a new one and returns it, so if we were to print a variable after a dot operator, it would return the original string

$Terminal
1 course = 'Python for Beginners'
2 print(course.upper())
3 print(course)

There are time where you want to find a sequence of characters in a string using the find method

$Terminal
1 course = 'Python for Beginners'
	    0123
2 print(course.find('P'))

Result: 
0

If we do lower case o for example we get a result of 4, because the index of o is 4

$Terminal
1 course = 'Python for Beginners'
	    01234
2 print(course.find('o'))

Result:
4

Note that the find method is case sensitive, if you pass a letter that is not in the string, the result will be -1

$Terminal
1 course = 'Python for Beginners'
2 print(course.find('O'))

Result:
-1 

We can also pass a sequence of characters for example we could find Beginners, the result would be 11, since thats where Beginners begin

$Terminal
1 course = 'Python for Beginners'
	    01234567.. ^-11
2 print(course.find('Beginners'))

Result:
11

We may use the replace method to replace a single or multiple characters in a string, when using the replace method, we add a coma after the first string to replace it with the second string. 

%Terminal
1 course = 'Python for Beginners'
2 print(course.replace('Beginners', 'Absolute Beginners'))

Result:
Python for Absolute Beginners

Just like the find method the replace method is case sensitive. So if we try replace beginners with lower case, Python will not find the string we are looking for so it will return the original variable

%Terminal
1 course = 'Python for Beginners'
2 print(course.replace('beginners', 'Absolute Beginners'))

Result:
Python for Beginners

We may replace a single character in a string

$Terminal
1 course = 'Python for Beginners'
2 print(course.replace('P', 'J'))

Jython for Beginners

There are times where you want to check the existence of characters or sequence of characters in a string, for this, we will use a in operator. 

$Terminal
1 course = 'Python for Beginners'
2 print('Python' in course) we are checking to see if 'Python' is in our course variable, this is an expression that producers a boolean value, True or False
	
Result:
True

If we were to look for 'python' in course, it would come out to false because it cant find that specific sequence of characters

$Terminal
1 course = 'Python for Beginners'
2 print('python' in course)
	
Result:
False

Note, the difference between the in operator and the find method is that the find method will return the index of a character or sequence of characters and the in operator produces a boolean value

Strings recap: 
len() <- used to count the number of characters in a string, its a general purpose function
specific functions for strings are methods
course.upper() <- convert string to upper case
course.lower() <- convert string to lower case
course.title() <- convert the first letter of every word to uppercase and keeping the rest lowercase
course.find() <- returns the index of a character or sequence of characters
course.replace() <- replacing characters and words in a string
'characters you are looking for' in course <- find a string characters in a variable

########################################
# * Chapter 7: Arithmetic Operations * #
########################################
48:38 on YT

Integers: whole numbers that dont have a decimal point, example 10
Floats: Numbers with a decimal point, example 10.123

Python supports arithmetic operations, the same we have in math, adding, subtracting, etc

Examples:
$Terminal, remove wording after ending parenthesis
print(10 + 3) addition
print(10 - 3) subtracting
print(10 * 3) multiplication
print(10 / 3 ) division, this will give you a float
print(10 // 3) division, by adding 2 forward slashes, you will get the result as an integer, not a float
print(10 % 3) modulus, this returns the remainder of the division, 3 *3 = 9, remainder = 1
print(10 ** 3) exponent, to the power, 10 to the power of 3, 10 * 10 * 10 = 1000

Augmented assignment operator

$Terminal
1 x = 10 <- we assign a variable
2 x = x + 3 <- to add to our variable, we must run this code, remember Python runs from top to bottom so the original value of x is 10, since we are adding plus 3, the new value of x will be 13
3 print(x)

Result: 
13

We can use the augmented assignment operator, we have enhanced the assignment operator

$Terminal
1 x = 10
2 x += 3 <- have can use this instead of the code above, we are adding plus 3 to the original value of x
3 print(x)

Result:
13

You can use other math operations with augmented assignment operator

$Terminal
1 x = 10
2 x -= 3 <- new x will equal the old x minus 3, which is 7
3 print(x)

Result:
7

######################################
# * Chapter 8: Operator Precedence * #
######################################
51:37 on YT

Math operations follow the order of operations, below is a line of code, Python will follow the order of operations to give you a result for x. Some might think the answer is 26 but that is wrong, the correct answer is 16 because first we do 3*2=6, 10+6=16

$Terminal
1 x = 10 + 3 * 2
2 print(x)

Result:
16

Order of operations:
Parenthesis (2 + 3)
Exponentiation 2 ** 3
Multiplication or division * /
Addition or subtraction + -

What is the result for the line of code below?

$Terminal
1 x = 10 + 3 * 2 ** 2 
2 print(x)

Explanation and result: First you would do 2 to the power of 2, which is 4. We do multiplication next by doing 3 * 4 which is 12, last we do 10 plus 12 equals the result of 22

We may change the order of operations by adding parentheses  

$Terminal
1 x = (10 + 3) * 2 ** 2 <- first we do 10+3 which is 13, then we do 2**2 which is 4, finally we do 13*4 which is 52
2 print(x)

Result: 
52

What would be the result of the line of code below?

$Terminal
1 x = (2 + 3) * 10 - 3
2 print(x)

Explanation and result: First you do 2 + 3 which is 5. Then we do 5 * 10 which is 50, finally we do 50 - 3 which is 47

#################################
# * Chapter 9: Math Functions * #
#################################
55:09 on YT

We can round numbers using the round function

$Terminal
1 x = 2.9
2 print(round(x))

Result: 
3

ABS function, or absoulute function will give you an absolute number that is always positive, even if the value is negative

$Terminal
1 x = 2.9
2 print(abs(-2.9))

Result: 
2.9

If you want to write a program that involves complex math calculations, you will need to import the math module. A module in Python is a seprate file that has some resuable code. We use the modules to organize our code into different files. Think of it like a grocery store, each isle is a module, for example one isle has fruits, another cleaning suplies, etc, each of those isle is a module. 

This is how you import the math module into Python

$Terminal
1 import math <- now the math module is an object like a string, we can use its methods or functions using a dot operator, math.()
2 print(math.ceil(2.9)) <- math.ceil() will give you the ceiling of a number

Result:
3

$Terminal
1 import math
2 print(math.ceil(2.9)) <- math.floor() will give you the floor of a number

Result:
2

If you want to learn more about math modules, look up "python 3 math module" in google, you will find the documentation of the functions listed there. Here is one link thats shows various functions, https://docs.python.org/3/library/math.html


#################################
# * Chapter 10: If statements * #
#################################
58:23 on YT

If statements allow us to make programs that make decisions based of some conditions

Below we will have some conditions set by this text file


conditions.txt

if it's hot <- here is 1 condition
	It's a hot day <- tell user its a hot day
	Drink plenty of water <- tell the to drink water
otherwise if it's cold <- here is another condition, if the condition is true it will tell the results below
	It's a cold day
	Wear warm clothes
otherwise <- another condition is if its neither hot or cold, it will tell the reselt below
	It's a lovely day

To write a program using if statements we first will define some boolean variable

$Terminal
1 is_hot = True <- we define a boolean variable
2 
3 if is_hot: <- when we add a colon, Pyton will automatically indent our cursor, it will execute any code if the boolean varibale is true
4     print("It's a hot day") <- This line of code will run if the above condition is true
5 print("Enjoy your day") <- Press Shift + Tab to return the cursor back the beginning, terminating the block above

We have set a boolean variabe that is true. We use a if statement to start a new block. Within the block we will print the "It's a hot day". We terminate the if statement block by pressing Shift + Tab which will return the cursos back the the beginning

Result:
It's a hot day
Enjoy your day

If we change the boolean value to False we will get this

$Terminal
1 is_hot = False
2 
3 if is_hot:
4     print("It's a hot day") 
5 print("Enjoy your day") 

Result:
Enjoy your day

We can add to our if statement block

$Terminal
1 is_hot = True
2 
3 if is_hot:
4    print("It's a hot day")
5    print("Drink plenty of water") <- we add this print statement to our block, as long a line is indented, it will be included to the if statement block 
6 print("Enjoy your day") <- Shift + Tab to end the if statement block and start a new line of code

Result:
It's a hot day
Drink plenty of water
Enjoy your day

If it is not a hot day, we can use the else function to run a different line of code

$Terminal
1 is_hot = False
2 
3 if is_hot: <- if this statement is true, the line of code below will run, if its false, the other line of code will run (else)
4     print("It's a hot day")
5     print("Drink plenty of water")
6 else: <- the boolean value is false, therefore else 
7     print("It's a cold day")
8     print("Wear warm clothes")
9 print("Enjoy your day")

Result:
It's a cold day
Wear warm clothes
Enjoy your day

We can use the elif function to add another condition

$Terminal
1 is_hot = False
2 is_cold = True
3 
4 if is_hot: <- Python will execute the if statement first, since it is false, it will ignore the 2 lines of codes indented below
5     print("It's a hot day")
6     print("Drink plenty of water")
7 elif is_cold <- since the variable is true, it will run the 2 lines of codes indented below
8     print("It's a cold day")
9     print("Wear warm clothes")
10 else: <- since one of conditions above is true, this else statement will be ingnored
11    print("It's a lovely day")
12 
13 print("Enjoy your day") <- this line of code will always be presented since its its own line, seperate from the other statements

Result:
It's a cold day
Wear warm clothes
Enjoy your day
 
if <- if the condition is true, it will run the indented code below it
elif <- otherwise if the condition is false, it will run the indented code below elif 
else <- if the if and elif condition are not considered, Python will run the indented code below else

#Excercise: Write a program with these rules
Price of house is 1 million
If the buy has good credit,
 - they need to put down 10%
otherwise(if not)
 - they need to put down 20%

$Terminal
1 price = 1000000 <- we set some variables
2 has_good_credit = True <- set our boolean value
3 
4 if has_good_credit: 
5     down_payment = 0.1 * price
6 else:
7     down_payment = 0.2 * price
8 print(f"Down payment: ${down_payment}") <- we use a formatted string, we add a label "Down payment", we use curly brackets to present our down_payment variable, we also add a $ sign before the curly brackets so it shows a dollar sign before the variable

Result:
Down payment: $100000.0

#####################################
# * Chapter 11: Logical Operators * #
#####################################

We use logical operators in situatuons where we have multiple conditions (and)

conditions.txt
if applicant has high income AND good credit <- we have 2 conditions, high income and good credit, if they have both conditions, then they may get a loan
	Eligible for loan

$Terminal
1 has_high_income = True
2 has_good_credit = True
3
4 if has_good_credit and has_high_income: <- if both conditions are true, then the indented code below will be run
5     print("Eligible for loan")

Result:
Eligible for loan

If we change either of the boolean values to false, the if condition will not run the indented line of code because the conditions were not met

$Terminal
1 has_high_income = False
2 has_good_credit = True
3
4 if has_good_credit and has_high_income: 
5     print("Eligible for loan")

Result: it will have a blank space

We have the or operator as well, we can use it when we want to do certain things if at least one condition is true

conditions.txt
if applicant has high income OR good credit
	Eligible for loan

$Terminal
1 has_high_income = False
2 has_good_credit = True
3
4 if has_good_credit and has_high_income: 
5     print("Eligible for loan")

Result:
Eligible for loan

Since at least one of the conditions is true, it will give you the result. False, True or True, False, either will give you the same result. The key is that one must be true. If both boolean values are false, then you will not get a result, it will be blank

AND: both
OR: at least one
NOT: it will reverse any boolean value we give it

conditions.txt
if applicant has good credit AND doesnt have a criminal record
	Eligible for loan

$Terminal
1 has_good_credit = True
2 has_criminal_record = False
3
4 if has_good_credit and not has_criminal_record:
5     print("Eligible for loan")

Result: 
Eligible for loan

When we use the NOT operator, its changes the has_criminal_record to True which will give us 2 conditions that are true, first one being has_good_credit. If we were to not place not operator we wouldnt get our result since there is a false condition. By adding not to the criminal record, we reverse the boolean value to true allowing us to get the result. Think of it as saying, yes its true there is no criminal record so the result will be shown

If we have a true value to the criminal record, the result will not show since we have a false condition. 

$Terminal
1 has_good_credit = True
2 has_criminal_record = False
3
4 if has_good_credit and not has_criminal_record:
5     print("Eligible for loan")

Result: 

########################################
# * Chapter 12: Comparison Operators * #
########################################

We use comparison operators when we want to compare a variable with a value

conditions.txt
if tempurate is greater than 30
	it's a hot day
otherwise if it's less than 10
	it's a cold day
otherwise
	it's neither hot nor cold

$Terminal
1 temperature = 30
2
3 if temperature > 30:
4     print("It's a hot day")
5 else:
6     print("It's not a hot day")

Result:
It's not a hot day

We get the result above since the tempurature is not greater than 30

> - greater than operator
>= - greater than or equal to operator
< - less than operator
<= - less than or equal to operator
== - equality operator, for example, if the temp is 30 then print its a hot day, this is different than the assignment operator which only has one =. If we do not use two == then Python will think we are trying to set a value of 30 to tempurature.
!= - not equals to

#Exercise:

We will write a program where a user will write in a name and we will check if its too long or short, kind of like how you put in a new username

conditions.txt
if name is less than 3 characters long
	name must be at least 3 characters
otherwise if it;s more than 50 characters long
	name can be maximum of 50 characters
otherwise
	name looks good!

$Terminal
1 name = "J"
2 
3 if len(name) < 3: <- we use the len funtion on name to see if its less than 3 characters long
4     print("Name must be at least 3 characters long") <- if it is less than 3 characters long, this will be printed
5 elif len(name) > 50: <- we use len function to see if its greater than 50 characters long
6     print("Name must be a maximum of 50 characters") <- if its greater than 50 characters long, this will be printed
7 else:
8     print("Name looks good!") <- if the name is between 3 and 50 characters long, this will be printed

Result:
Name must be at least 3 characters long

####################################
# * Chapter 13: Weight Converter * #
####################################








